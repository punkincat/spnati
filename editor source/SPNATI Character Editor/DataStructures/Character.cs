using Desktop;
using Desktop.DataStructures;
using SPNATI_Character_Editor.DataStructures;
using SPNATI_Character_Editor.IO;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;

namespace SPNATI_Character_Editor
{
	/// <summary>
	/// Data representation for behaviour.xml and meta.xml
	/// </summary>
	/// <remarks>
	/// PROPERTY ORDER IS IMPORTANT - Order determines the order attributes are placed in the xml files
	/// </remarks>
	[XmlRoot("opponent", Namespace = "")]
	[XmlHeader("This file was machine generated using the Character Editor {Version} at {Time} on {Date}. Do not edit this file directly unless you know what you're doing.")]
	public class Character : BindableObject, IHookSerialization, IRecord, ISkin, IDirtiable
	{
		[XmlElement("version")]
		/// <summary>
		/// What version of the editor this was last saved under. Used for performing one-time data conversions when necessary.
		/// </summary>
		public string Version { get; set; }

		[XmlIgnore]
		public EditorSource Source;

		private bool _dirty;
		[XmlIgnore]
		public bool IsDirty
		{
			get { return _dirty; }
			set
			{
				_dirty = value;
				OnDirtyChanged?.Invoke(this, _dirty);
			}
		}

		/// <summary>
		/// Set during session where the character was initially created
		/// </summary>
		[XmlIgnore]
		public bool IsNew { get; set; }

		[XmlIgnore]
		public PoseMap PoseLibrary;

		[XmlIgnore]
		public string Group { get; }

		/// <summary>
		/// Where did this character come from?
		/// </summary>
		[XmlIgnore]
		public Metadata Metadata
		{
			get { return Get<Metadata>(); }
			set { Set(value); }
		}

		/// <summary>
		/// Cached information about what markers are set in this character's dialog
		/// </summary>
		[XmlIgnore]
		public Lazy<MarkerData> Markers;

		[XmlIgnore]
		public string FolderName
		{
			get { return Get<string>(); }
			set { Set(value); }
		}

		[XmlElement("first")]
		public string FirstName
		{
			get { return Get<string>(); }
			set { Set(value); }
		}

		[XmlElement("last")]
		public string LastName
		{
			get { return Get<string>(); }
			set { Set(value); }
		}

		[XmlElement("label")]
		public ObservableCollection<StageSpecificValue> Labels
		{
			get { return Get<ObservableCollection<StageSpecificValue>>(); }
			set { Set(value); }
		}

		[XmlIgnore]
		public string Label // Compatibility property
		{
			get
			{
				return Labels.Find(l => l.Stage == 0)?.Value;
			}
			set
			{
				StageSpecificValue s0lbl = Labels.Find(l => l.Stage == 0);
				if (s0lbl != null)
				{
					s0lbl.Value = value;
				}
				else
				{
					Labels.Add(new StageSpecificValue(0, value));
				}
			}
		}

		[XmlElement("gender")]
		public string Gender
		{
			get { return Get<string>(); }
			set { Set(value); }
		}

		[XmlElement("size")]
		public string Size
		{
			get { return Get<string>(); }
			set { Set(value); }
		}

		[XmlElement("timer")]
		public int Stamina
		{
			get { return Get<int>(); }
			set { Set(value); }
		}

		[XmlNewLine(Position = XmlNewLinePosition.After)]
		[XmlElement("intelligence")]
		public ObservableCollection<StageSpecificValue> Intelligence
		{
			get { return Get<ObservableCollection<StageSpecificValue>>(); }
			set { Set(value); }
		}

		[XmlIgnore]
		public CharacterTagList TagList = new CharacterTagList();

		[XmlArray("tags")]
		[XmlArrayItem("tag")]
		public List<CharacterTag> Tags
		{
			get { return TagList.Tags; }
			set { TagList.Tags = value; }
		}

		[XmlArray("nicknames")]
		[XmlArrayItem("nickname")]
		public ObservableCollection<Nickname> Nicknames
		{
			get { return Get<ObservableCollection<Nickname>>(); }
			set { Set(value); }
		}

		[XmlElement("stylesheet")]
		public string StyleSheetName
		{
			get { return Get<string>(); }
			set { Set(value); }
		}

		private CharacterStyleSheet _styles;
		[XmlIgnore]
		public CharacterStyleSheet Styles
		{
			get
			{
				if (_styles == null && !string.IsNullOrEmpty(StyleSheetName))
				{
					_styles = CharacterStyleSheetSerializer.Load(this, StyleSheetName);
					_styles.PropertyChanged += _styles_PropertyChanged;
				}
				return _styles;
			}
		}

		private void _styles_PropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			IsDirty = true;
		}

		[XmlNewLine]
		[XmlArray("start")]
		[XmlArrayItem("state")]
		public List<DialogueLine> StartingLines { get; set; }

		[XmlNewLine]
		[XmlArray("wardrobe")]
		[XmlArrayItem("clothing")]
		public List<Clothing> Wardrobe { get; set; }

		[XmlNewLine]
		[XmlArray("poses")]
		[XmlArrayItem("pose")]
		public List<Pose> Poses { get; set; }

		[XmlNewLine(XmlNewLinePosition.Both)]
		[XmlElement("behaviour")]
		public Behaviour Behavior
		{
			get { return Get<Behaviour>(); }
			set { Set(value); }
		}

		[XmlNewLine(XmlNewLinePosition.After)]
		[XmlElement("epilogue")]
		public List<Epilogue> Endings { get; set; }

		[XmlAnyElement]
		public List<System.Xml.XmlElement> ExtraXml;

		[XmlIgnore]
		public CollectibleData Collectibles
		{
			get { return Get<CollectibleData>(); }
			set { Set(value); }
		}

		private bool _built;

		public event EventHandler<bool> OnDirtyChanged;

		[XmlIgnore]
		public string Name
		{
			get
			{
				if (!string.IsNullOrEmpty(Metadata.Label))
				{
					return Metadata.Label;
				}

				return Label;
			}
		}

		[XmlIgnore]
		public string Key
		{
			get { return FolderName; }
			set { FolderName = value; }
		}

		private Costume _currentSkin;
		/// <summary>
		/// Current skin in play
		/// </summary>
		[XmlIgnore]
		public Costume CurrentSkin
		{
			get { return _currentSkin; }
			set
			{
				if (_currentSkin != value)
				{
					_currentSkin = value;
					NotifyPropertyChanged();
				}
			}
		}

		/// <summary>
		/// Gets whether this is loaded from behaviour.xml or if it's just the placeholder cached version
		/// </summary>
		public virtual bool IsFullyLoaded
		{
			get { return true; }
		}

		public string ToLookupString()
		{
			return $"{Name} [{Key}]";
		}

		/// <summary>
		/// Gets the path to a pose file on disk
		/// </summary>
		/// <param name="subfolder"></param>
		/// <param name="poseName"></param>
		/// <param name="asset"></param>
		/// <returns></returns>
		public string GetPosePath(string sheetName, string subfolder, string poseName, bool asset)
		{
			string root = asset ? Path.Combine(Config.AppDataDirectory, FolderName, sheetName) : Path.Combine(GetDirectory());
			if (!string.IsNullOrEmpty(subfolder))
			{
				root = Path.Combine(root, subfolder);
			}
			return Path.Combine(root, poseName + ".png");
		}

		public int CompareTo(IRecord other)
		{
			return Label.CompareTo((other as Character).Label);
		}

		public Character()
		{
			FirstName = "New";
			LastName = "Character";
			Labels = new ObservableCollection<StageSpecificValue>();
			Gender = "female";
			Size = "medium";
			Intelligence = new ObservableCollection<StageSpecificValue>();
			Stamina = 15;
			Tags = new List<CharacterTag>();
			Metadata = new Metadata();
			Markers = new Lazy<MarkerData>(LoadMarkers);
			Wardrobe = new List<Clothing>();
			StartingLines = new List<DialogueLine>();
			Endings = new List<Epilogue>();
			Nicknames = new ObservableCollection<Nickname>();
			Behavior = new Behaviour();
			Poses = new List<Pose>();
			Wardrobe = new List<Clothing>();
			Collectibles = new CollectibleData();
			PoseLibrary = new PoseMap(this);
		}

		/// <summary>
		/// Clears all data from this character
		/// </summary>
		public new void Clear()
		{
			FirstName = "";
			LastName = "";
			Labels.Clear();
			Gender = "";
			Size = "";
			Behavior = new Behaviour();
			Intelligence = new ObservableCollection<StageSpecificValue>();
			Stamina = 15;
			Tags.Clear();
			Metadata = new Metadata();
			Markers = new Lazy<MarkerData>(LoadMarkers);
			Wardrobe = new List<Clothing>();
			StartingLines = new List<DialogueLine>();
			Endings = new List<Epilogue>();
			Poses = new List<Pose>();
			Version = "";
			Nicknames = new ObservableCollection<Nickname>();
			Collectibles = new CollectibleData();
		}

		public override string ToString()
		{
			return Label;
		}

		private MarkerData LoadMarkers()
		{
			MarkerData data = CharacterDatabase.LoadMarkerData(this);
			return data;
		}

		/// <summary>
		/// DisplayMember only works with properties, so this is for what to display in the LoadCharacterPrompt
		/// </summary>
		public string DisplayName { get { return FolderName; } }

		#region Outfit
		public int Layers
		{
			get { return Wardrobe.Count; }
		}

		string ISkin.FolderName
		{
			get
			{
				return FolderName;
			}
		}

		Character ISkin.Character
		{
			get
			{
				return this;
			}
		}

		/// <summary>
		/// Converts a layer to a user friendly name based on the wardrobe
		/// </summary>
		/// <param name="layer"></param>
		public StageName LayerToStageName(int layer)
		{
			return LayerToStageName(layer, false, CurrentSkin ?? (IWardrobe)this);
		}

		public StageName LayerToStageName(int layer, bool advancingStage)
		{
			return LayerToStageName(layer, advancingStage, CurrentSkin ?? (IWardrobe)this);
		}

		/// <summary>
		/// Converts a layer to a user friendly name based on the wardrobe
		/// </summary>
		/// <param name="layer"></param>
		public StageName LayerToStageName(int layer, IWardrobe list)
		{
			return LayerToStageName(layer, false, list);
		}

		/// <summary>
		/// Converts a layer to a user friendly name based on the wardrobe
		/// </summary>
		/// <param name="layer">Layer to name</param>
		/// <param name="advancingStage">True if the name should be in relation to advancing to the next stage, rather than what happened in the previous stage</param>
		public StageName LayerToStageName(int layer, bool advancingStage, IWardrobe list)
		{
			int count = list.Layers;
			if (layer < 0 || layer >= count + Clothing.ExtraStages)
				return null;

			string label = layer.ToString();
			if (Config.SafeMode)
			{
				if (layer == count)
				{
					label = "Final";
				}
				else if (layer == count + 1)
				{
					label = "Forfeiting";
				}
				else if (layer == count + 2)
				{
					label = "Finished";
				}
			}
			else
			{
				if (advancingStage)
				{
					if (layer < count)
					{
						Clothing clothes = list.GetClothing(Layers - 1 - layer);
						if (clothes.ToString() != "SKIP") 
						{ 
							label = "Losing " + clothes.ToString();
						}
						else 
						{
							label = "SKIPPED";
						}
					}
				}
				else
				{
					if (layer == 0)
						label = "Fully Clothed";
					else if (layer < count)
					{
						int index = layer - 1;
						Clothing lastClothes = list.GetClothing(Layers - 1 - index);
						Clothing clothes = list.GetClothing(Layers - 1 - layer);
						if (lastClothes.ToString() != "SKIP")
						{
							if (clothes.ToString() != "SKIP")
							{
								label = "Lost " + lastClothes.ToString();
							}
							else
							{
								label = "Just Stripped " + lastClothes.ToString();
							}
						}
						else
						{
							if (clothes.ToString() == "SKIP") 
							{ 
								label = "EMPTY STAGE";
							}
							else 
							{
								do
								{
									index--;
									clothes = list.GetClothing(Layers - 1 - index);
								} while (clothes.ToString() == "SKIP");
								label = "Lost " + clothes.ToString();
							}
						}
					}
				}
				if (layer == count)
				{
					label = "Naked";
				}
				else if (layer == count + 1)
				{
					label = "Masturbating";
				}
				else if (layer == count + 2)
				{
					label = "Finished";
				}
			}
			return new StageName(layer.ToString(), label);
		}

		/// <summary>
		/// Converts a layer to a user friendly name for the txt flat file
		/// </summary>
		/// <param name="layer"></param>
		public StageName LayerToFlatFileName(int layer, bool advancingStage)
		{
			string label = layer.ToString();
			if (layer < 0 || layer >= Wardrobe.Count + Clothing.ExtraStages)
			{
				if (layer == -3)
				{
					label = "naked";
				}
				else if (layer == -2)
				{
					label = "masturbating";
				}
				else if (layer == -1)
				{
					label = "finished";
				}
				else
				{
					return null;
				}
			}
			else
			{
				if (advancingStage)
				{
					layer++;
					if (layer <= Wardrobe.Count)
					{
						Clothing clothes = Wardrobe[Layers - layer];
						if (clothes.ToString() != "SKIP")
						{
							label = "losing " + clothes.ToString();
						}
						else
						{
							label = "SKIPPED";
						}
					}
					else
					{
						label = "lost all clothing";
					}
				}
				else
				{
					if (layer == 0)
						label = "Fully Clothed";
					else if (layer < Wardrobe.Count)
					{
						int index = layer - 1;
						Clothing lastClothes = Wardrobe[Layers - 1 - index];
						Clothing clothes = Wardrobe[Layers - 1 - layer];
						if (lastClothes.ToString() != "SKIP")
						{
							label = "Lost " + lastClothes.ToString();
						}
						else
						{
							if (clothes.ToString() == "SKIP")
							{
								label = "EMPTY STAGE";
							}
							else
							{
								do
								{
									index--;
									clothes = Wardrobe[Layers - 1 - index];
								} while (clothes.ToString() == "SKIP");
								label = "Lost " + clothes.ToString();
							}
						}
					}
					else if (layer == Wardrobe.Count)
					{
						label = "Naked";
					}
					else if (layer == Wardrobe.Count + 1)
					{
						label = "Masturbating";
					}
					else if (layer == Wardrobe.Count + 2)
					{
						label = "Finished";
					}
				}
			}
			return new StageName(layer.ToString(), label);
		}

		/// <summary>
		/// Adds a new layer
		/// </summary>
		/// <param name="layer">Layer to add</param>
		/// <returns>Stage of added layer</returns>
		public int AddLayer(Clothing layer)
		{
			Wardrobe.Insert(0, layer);
			return Wardrobe.Count - 1;
		}

		/// <summary>
		/// Removes a layer
		/// </summary>
		/// <param name="layer">Layer to remove</param>
		/// <returns>Stage of removed layer</returns>
		public int RemoveLayer(Clothing layer)
		{
			int index = Wardrobe.IndexOf(layer);
			if (index >= 0)
				Wardrobe.RemoveAt(index);
			return Wardrobe.Count - index;
		}

		/// <summary>
		/// Moves the clothing item at the given index down
		/// </summary>
		/// <param name="layer">Layer to move</param>
		/// <returns>Stage of layer before it was moved</returns>
		public int MoveDown(Clothing layer)
		{
			int index = Wardrobe.IndexOf(layer);
			if (index < 1 || index >= Wardrobe.Count)
				return -1;
			Clothing item = Wardrobe[index];
			Wardrobe.RemoveAt(index);
			Wardrobe.Insert(index - 1, item);
			return Wardrobe.Count - index;
		}

		/// <summary>
		/// Moves the clothing at the given index up
		/// </summary>
		/// <param name="layer">Layer to move</param>
		/// <returns>Stage of layer before it was moved</returns>
		public int MoveUp(Clothing layer)
		{
			int index = Wardrobe.IndexOf(layer);
			if (index < 0 || index >= Wardrobe.Count - 1)
				return -1;
			Clothing item = Wardrobe[index];
			Wardrobe.RemoveAt(index);
			Wardrobe.Insert(index + 1, item);
			return Wardrobe.Count - index;
		}

		/// <summary>
		/// Applies wardrobe changes to the dialogue tree
		/// </summary>
		/// <param name="changes"></param>
		public void ApplyWardrobeChanges(Queue<WardrobeChange> changes)
		{
			Behavior.ApplyWardrobeChanges(this, changes);
		}
		#endregion

		#region Serialization
		/// <summary>
		/// Gets the full path to this character's attachments
		/// </summary>
		/// <returns></returns>
		public string GetAttachmentsDirectory()
		{
			string root = Config.GetString(Settings.GameDirectory);
			return Path.Combine(root, "attachments", FolderName);
		}

		public virtual void OnBeforeSerialize()
		{
			Behavior.Serializing = true;
			Gender = Gender.ToLower();
			Behavior.OnBeforeSerialize();
			Metadata.PopulateFromCharacter(this);
			Version = Config.Version;
			Metadata.LastUpdate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
			foreach (Epilogue ending in Endings)
			{
				ending.OnBeforeSerialize();
			}

			// dumb and also bad
			foreach (Pose pose in Poses)
			{
				foreach (Sprite sp in pose.Sprites)
				{
					if (sp.Src.Contains(FolderName + "/"))
					{
						sp.Src = sp.Src.Substring(FolderName.Length + 1);

						// dumber and also worse (I mean REALLY bad, I hate it)
						foreach (Character c in CharacterDatabase.Characters)
						{
							if (sp.Src.StartsWith(c.FolderName + "/"))
							{
								sp.Src = "../" + sp.Src;
								break;
							}
						}
					}
				}

				foreach (Directive dir in pose.Directives)
				{
					foreach (Keyframe keyf in dir.Keyframes)
					{
						if (!String.IsNullOrEmpty(keyf.Src) && keyf.Src.Contains(FolderName + "/"))
						{
							keyf.Src = keyf.Src.Substring(FolderName.Length + 1);

							// dumber and also worse (I mean REALLY bad, I hate it)
							foreach (Character c in CharacterDatabase.Characters)
							{
								if (keyf.Src.StartsWith(c.FolderName + "/"))
								{
									keyf.Src = "../" + keyf.Src;
									break;
								}
							}
						}
					}
				}
			}

			Behavior.Serializing = false;
		}

		public virtual void OnAfterDeserialize(string source)
		{
			FolderName = Path.GetFileName(Path.GetDirectoryName(source));

			Wardrobe.ForEach(c => c.OnAfterDeserialize());
			foreach (var line in StartingLines)
			{
				line.Text = XMLHelper.DecodeEntityReferences(line.Text);
				CacheMarker(line.Marker);
			}
			Behavior.OnAfterDeserialize(this);
			foreach (Epilogue ending in Endings)
			{
				ending.OnAfterDeserialize();
			}
			Poses.Sort();
			foreach (Pose pose in Poses)
			{
				pose.OnAfterDeserialize();

				// dumb and also bad
				foreach (Sprite sp in pose.Sprites)
				{
					if (!sp.Src.Contains(FolderName + "/"))
					{
						sp.Src = FolderName + "/" + sp.Src;
					}
				}

				foreach (Directive dir in pose.Directives)
				{
					foreach (Keyframe keyf in dir.Keyframes)
					{
						if (!String.IsNullOrEmpty(keyf.Src) && !keyf.Src.Contains(FolderName + "/"))
						{
							keyf.Src = FolderName + "/" + keyf.Src;
						}
					}
				}
			}

			PoseLibrary = new PoseMap(this);
		}
		#endregion

		/// <summary>
		/// Called when editing a character in the editor to make sure working fields are built properly.
		/// Working fields are set up lazily so as to not inflict the performance cost on every single character during startup
		/// </summary>
		public void PrepareForEdit()
		{
			if (_built)
				return;
			Behavior.PrepareForEdit(this);
			IsDirty = false;
			PropertyChanged += Character_PropertyChanged;
			_built = true;
		}

		private void Character_PropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != "CurrentSkin")
			{
				IsDirty = true;
			}
		}

		/// <summary>
		/// Gets a count of the number of unique, non-targeted lines
		/// </summary>
		/// <returns></returns>
		public int GetGenericLineCount()
		{
			int poses;
			return GetLineCount(LineFilter.Generic, out poses);
		}

		/// <summary>
		/// Gets a count of the number of unique targeted lines
		/// </summary>
		/// <returns></returns>
		public int GetTargetedLineCount()
		{
			int poses;
			return GetLineCount(LineFilter.Targeted, out poses);
		}

		/// <summary>
		/// Gets a count of the number of unique targeted lines
		/// </summary>
		/// <returns></returns>
		public int GetFilterLineCount()
		{
			int poses;
			return GetLineCount(LineFilter.Filter, out poses);
		}

		public void GetUniqueLineAndPoseCount(out int lines, out int poses)
		{
			lines = GetLineCount(LineFilter.None, out poses);
		}

		/// <summary>
		/// Gets a count of unique lines
		/// </summary>
		/// <returns></returns>
		public int GetUniqueLineCount()
		{
			int poses;
			return GetLineCount(LineFilter.None, out poses);
		}

		private int GetLineCount(LineFilter filters, out int poseCount)
		{
			poseCount = 0;
			int count = 0;
			HashSet<string> poses = new HashSet<string>();
			HashSet<string> lines = new HashSet<string>();
			foreach (Case stageCase in Behavior.EnumerateSourceCases())
			{
				AddLines(poses, lines, stageCase, filters, ref poseCount, ref count);
			}
			return count;
		}

		private void AddLines(HashSet<string> poses, HashSet<string> lines, Case theCase, LineFilter filters, ref int poseCount, ref int count)
		{
			if (!string.IsNullOrEmpty(theCase.Hidden) || !string.IsNullOrEmpty(theCase.Disabled))
			{
				return;
			}
			bool targeted = theCase.HasTargetedConditions;
			bool filter = theCase.HasFilters;
			bool generic = !targeted && !filter;

			if ((filters == LineFilter.None) ||
				(filters & LineFilter.Generic) > 0 && generic ||
				(filters & LineFilter.Targeted) > 0 && targeted ||
				(filters & LineFilter.Filter) > 0 && filter)
			{
				foreach (DialogueLine line in theCase.Lines)
				{
					HashSet<string> images = new HashSet<string>();
					HashSet<int> usedStages = new HashSet<int>();
					foreach (StageImage img in line.Images)
					{
						if (img.Image != null)
						{
							foreach (int stage in img.Stages)
							{
								usedStages.Add(stage);
								string imgToAdd = img.Image.Replace("#", stage.ToString());
								if (imgToAdd.Contains("custom:") && !imgToAdd.Contains(stage.ToString()))
								{
									// it's a cross-stage custom pose
									imgToAdd += " CROSS " + stage;
								}

								images.Add(imgToAdd);
							}
						}
					}

					if (line.Image != null)
					{
						if (line.Image.Contains("#"))
						{
							foreach (int stage in theCase.Stages)
							{
								if (!usedStages.Contains(stage))
								{
									images.Add(line.Image.Replace("#", stage.ToString()));
								}
							}
						}
						else if (line.Image.Contains("custom:"))
						{
							foreach (int stage in theCase.Stages)
							{
								if (!usedStages.Contains(stage))
								{
									string imgToAdd = line.Image;

									if (!imgToAdd.Contains(stage.ToString()))
									{
										// it's a cross-stage custom pose
										imgToAdd += " CROSS " + stage;
									}

									images.Add(imgToAdd);
								}
							}
						}
						else
						{
							images.Add(line.Image);
						}
					}
					foreach (string img in images)
					{
						if (!poses.Contains(img))
						{
							poses.Add(img);
							poseCount++;
						}
					}
					if (lines.Contains(line.Text))
						continue;
					count++;
					lines.Add(line.Text);
				}
			}
		}

		[Flags]
		public enum LineFilter
		{
			None = 0,
			Generic = 1,
			/// <summary>
			/// Target or AlsoPlaying
			/// </summary>
			Targeted = 2,
			/// <summary>
			/// Filter
			/// </summary>
			Filter = 8
		}

		public IEnumerable<Case> GetWorkingCasesTargetedAtCharacter(Character character, TargetType targetTypes)
		{
			foreach (var workingCase in Behavior.GetWorkingCases())
			{
				if (IsCaseTargetedAtCharacter(workingCase, character, targetTypes) && String.IsNullOrEmpty(workingCase.Hidden) && String.IsNullOrEmpty(workingCase.Disabled))
				{
					yield return workingCase;
				}
			}
		}

		/// <summary>
		/// Iterates through dialogue that targets another particular character
		/// </summary>
		/// <param name="character">The character being targeted</param>
		/// <returns></returns>
		public IEnumerable<Case> GetCasesTargetedAtCharacter(Character character, TargetType targetTypes)
		{
			foreach (var stageCase in Behavior.EnumerateSourceCases())
			{
				if (IsCaseTargetedAtCharacter(stageCase, character, targetTypes))
				{
					yield return stageCase;
				}
			}
		}

		public static bool IsCaseTargetedAtCharacter(Case stageCase, Character character, TargetType allowedTargetTypes)
		{
			if (allowedTargetTypes == TargetType.None)
				return false;
			bool targeted = false;
			bool targetedByTag = false;
			targeted = stageCase.GetTargets().Contains(character.FolderName);
			if (!targeted && (allowedTargetTypes & TargetType.Filter) > 0)
			{
				string gender = stageCase.Tag.StartsWith("male_") ? "male" : stageCase.Tag.StartsWith("female_") ? "female" : null;
				if (gender != null && gender != character.Gender)
					return false;
				string size = stageCase.Tag.Contains("_large_") ? "large" : stageCase.Tag.Contains("_medium_") ? "medium" : stageCase.Tag.Contains("_small_") ? "small" : null;
				if (size != null && character.Size != size)
					return false;

				foreach (TargetCondition cond in stageCase.Conditions)
				{
					if (!string.IsNullOrEmpty(cond.FilterTag))
					{
						if (character.Tags.Find(t => t.Tag == cond.FilterTag) != null)
						{
							targetedByTag = true;
							break;
						}
					}
				}
			}
			if ((targeted && (allowedTargetTypes & TargetType.DirectTarget) > 0) || targetedByTag)
			{
				return true;
			}
			return stageCase.AlternativeConditions.Any(c => { c.Tag = stageCase.Tag; return IsCaseTargetedAtCharacter(c, character, allowedTargetTypes); });
		}

		/// <summary>
		/// Gets a count of lines targeted towards another character
		/// </summary>
		/// <param name="folderName"></param>
		/// <returns></returns>
		public int GetCharacterUsage(Character character, out int tagCount)
		{
			tagCount = 0;
			int count = 0;
			HashSet<string> lines = new HashSet<string>();
			foreach (var stageCase in GetCasesTargetedAtCharacter(character, TargetType.All))
			{
				foreach (var line in stageCase.Lines)
				{
					if (lines.Contains(line.Text))
						continue;

					bool directlyTargeted = false;

					foreach (TargetCondition cond in stageCase.Conditions)
					{
						if (cond.Character == character.FolderName)
						{
							directlyTargeted = true;
							break;
						}
					}

					if (directlyTargeted)
						count++;
					else
						tagCount++;

					lines.Add(line.Text);
				}
			}

			return count;
		}

		/// <summary>
		/// Gets a count of lines targeting a specific tag
		/// </summary>
		/// <returns></returns>
		public int GetTagUsage(string tag, string targetGender)
		{
			int count = 0;
			HashSet<string> lines = new HashSet<string>();
			foreach (var stageCase in Behavior.EnumerateSourceCases())
			{
				if (targetGender != "" && !stageCase.Tag.StartsWith(targetGender))
					continue;
				
				bool usesTag = stageCase.Conditions.Find(c => c.FilterTag == tag && c.Count != "0" && c.Count != "0-0") != null;
				if (usesTag)
				{
					foreach (var line in stageCase.Lines)
					{
						if (lines.Contains(line.Text))
							continue;
						count++;
						lines.Add(line.Text);
					}
				}
			}
			return count;
		}

		public void RemoveMarkerReference(string marker)
		{
			Markers.Value.RemoveReference(marker);
		}

		public void CacheMarker(string marker)
		{
			Markers.Value.Cache(marker);
		}

		public void CacheMarker(MarkerOperation marker)
		{
			Markers.Value.Cache(marker);
		}

		public WardrobeRestrictions GetWardrobeRestrictions()
		{
			//For established characters, lock down changing the layer amount and order since it's hugely disruptive
			string status = Listing.Instance.GetCharacterStatus(FolderName);
			if (status != OpponentStatus.Testing && status != OpponentStatus.Unlisted && status != OpponentStatus.Incomplete)
			{
				return WardrobeRestrictions.LayerCount | WardrobeRestrictions.NoSkip;
			}
			return WardrobeRestrictions.NoSkip;
		}

		public Clothing GetClothing(int index)
		{
			return Wardrobe[index];
		}

		public List<Clothing> GetConvertedWardrobe()
		{
			List<Clothing> ConvertedWardrobe = new List<Clothing>();
			
			foreach (Clothing c in Wardrobe)
			{
				ConvertedWardrobe.Add(c.Copy());
			}

			int lowestMajorUpper = 1000;
			int lowestMajorLower = 1000;
			int importantUpper = 1000;
			int importantLower = 1000;

			for (int i = 0; i < Wardrobe.Count; i++)
			{
				if (Wardrobe[i].Type == "important")
				{
					if (importantUpper == 1000 && (Wardrobe[i].Position == "upper" || Wardrobe[i].Position == "both"))
					{
						importantUpper = i;
					}
					if (importantLower == 1000 && (Wardrobe[i].Position == "lower" || Wardrobe[i].Position == "both"))
					{
						importantLower = i;
					}
				}

				if (importantUpper != 1000 && importantLower != 1000)
				{
					break;
				}
			}

			// if both chest and crotch are exposed at once, no important upper
			if (importantUpper == importantLower && importantLower != 1000)
			{
				ConvertedWardrobe[importantLower].Position = "lower";
			}

			for (int i = 0; i < Wardrobe.Count; i++)
			{
				if (Wardrobe[i].Type == "major")
				{
					if (lowestMajorUpper == 1000 && (Wardrobe[i].Position == "upper" || Wardrobe[i].Position == "both"))
					{
						lowestMajorUpper = i;
					}
					if (lowestMajorLower == 1000 && (Wardrobe[i].Position == "lower" || Wardrobe[i].Position == "both"))
					{
						lowestMajorLower = i;
					}
				}

				if (lowestMajorUpper != 1000 && lowestMajorLower != 1000)
				{
					break;
				}
			}

			if (lowestMajorLower < importantLower)
			{
				ConvertedWardrobe[lowestMajorLower].Type = "important";
				ConvertedWardrobe[lowestMajorLower].Position = "lower";
			}

			if (lowestMajorUpper < importantUpper)
			{
				ConvertedWardrobe[lowestMajorUpper].Type = "important";
				ConvertedWardrobe[lowestMajorUpper].Position = "upper";
			}

			return ConvertedWardrobe;
		}

		public string GetDirectory()
		{
			return Config.GetRootDirectory(this);
		}

		public string GetBackupDirectory()
		{
			return Config.GetBackupDirectory(this);
		}

		public ISkin Skin
		{
			get
			{
				ISkin skin = CurrentSkin;
				if (skin == null)
				{
					skin = this;
				}
				return skin;
			}
		}

		public HashSet<string> GetRequiredPoses(bool stageless)
		{
			return null;
		}

		public List<Pose> CustomPoses
		{
			get { return Poses; }
			set { Poses = value; }
		}

		/// <summary>
		/// Enumerates through all tags belonging to a certain group
		/// </summary>
		/// <param name="group"></param>
		/// <returns></returns>
		public IEnumerable<CharacterTag> EnumerateTags(string group)
		{
			foreach (CharacterTag tag in Tags)
			{
				Tag t = TagDatabase.GetTag(tag.Tag);
				if (t.Group == group)
				{
					yield return tag;
				}
			}
		}

		public IEnumerable<DuplicateCase> EnumerateDuplicates()
		{
			Dictionary<string, HashSet<int>> hands = new Dictionary<string, HashSet<int>>();
			DualKeyDictionary<string, int, Case> map = new DualKeyDictionary<string, int, Case>();

			//TODO: Generalize this to handle more than Hand cases

			hands["okay_hand"] = new HashSet<int>();
			hands["good_hand"] = new HashSet<int>();
			hands["bad_hand"] = new HashSet<int>();
			hands["hand"] = new HashSet<int>();
			foreach (Case workingCase in Behavior.GetWorkingCases())
			{
				string tag = workingCase.Tag;
				if (tag == "okay_hand" || tag == "good_hand" || tag == "bad_hand" || tag == "hand")
				{
					int code = workingCase.GetFullHashCode();
					map.Set(tag, code, workingCase);
					hands[tag].Add(code);
					bool inAll = true;
					bool inDefault = false;
					foreach (KeyValuePair<string, HashSet<int>> kvp in hands)
					{
						bool inTag = kvp.Value.Contains(code);
						if (kvp.Key == "hand")
						{
							inDefault = inTag;
						}
						else
						{
							inAll = inAll && inTag;
							if (!inAll)
							{
								break;
							}
						}
					}
					if (inAll)
					{
						//found a duplicate
						DuplicateCase dupes = new DuplicateCase("hand");
						dupes.Duplicates.Add(map.Get("good_hand", code));
						dupes.Duplicates.Add(map.Get("okay_hand", code));
						dupes.Duplicates.Add(map.Get("bad_hand", code));
						if (inDefault)
						{
							dupes.Replacement = map.Get("hand", code);
						}
						yield return dupes;
					}
				}
			}
		}

		public List<CharacterTag> GetTags()
		{
			return Tags;
		}

		public void AddTags(List<CharacterTag> tag)
		{
			Tags.AddRange(tag);
		}
	}

	/// <summary>
	/// Change to wardrobe, used for updating dialogue stages
	/// </summary>
	public class WardrobeChange
	{
		/// <summary>
		/// Type of change performed
		/// </summary>
		public WardrobeChangeType Change;
		/// <summary>
		/// Index of item being changed
		/// </summary>
		public int Index;

		public WardrobeChange(WardrobeChangeType type, int index)
		{
			Change = type;
			Index = index;
		}
	}

	public enum WardrobeChangeType
	{
		/// <summary>
		/// Item as added at the given index
		/// </summary>
		Add,
		/// <summary>
		/// Item was removed from the given index
		/// </summary>
		Remove,
		/// <summary>
		/// Item was moved up, originally located at the given index
		/// </summary>
		MoveUp,
		/// <summary>
		/// Item was moved down, originally located at the given index
		/// </summary>
		MoveDown
	}

	public class StageSpecificValue : BindableObject
	{
		/// <summary>
		/// Stages this intelligence begins at
		/// </summary>
		[XmlAttribute("stage")]
		[DefaultValue(0)]
		public int Stage
		{
			get { return Get<int>(); }
			set { Set(value); }
		}

		/// <summary>
		/// Intelligence level
		/// </summary>
		[XmlText]
		public string Value
		{
			get { return Get<string>(); }
			set { Set(value); }
		}

		public StageSpecificValue()
		{
		}

		public StageSpecificValue(int stage, string value)
		{
			Stage = stage;
			Value = value;
		}

		public override string ToString()
		{
			return $"{Stage} - {Value}";
		}
	}

	public enum CharacterSource
	{
		/// <summary>
		/// characters that are in the main game or testing tables
		/// </summary>
		Main,
		/// <summary>
		/// finished characters that were moved offline to conserve space
		/// </summary>
		Offline,
		/// <summary>
		/// characters that were never completed
		/// </summary>
		Incomplete
	}

	public class CharacterTag : IComparable<CharacterTag>, ICloneable
	{
		[XmlText]
		public string Tag;

		[XmlAttribute("from")]
		public string From;

		[XmlAttribute("to")]
		public string To;

		[DefaultValue(false)]
		[XmlAttribute("remove")]
		public bool Remove;

		[XmlAnyElement]
		public List<XmlElement> ExtraXml;

		public CharacterTag() { }
		public CharacterTag(string tag)
		{
			Tag = tag;
		}

		public object Clone()
		{
			CharacterTag copy = MemberwiseClone() as CharacterTag;
			return copy;			
		}

		public int CompareTo(CharacterTag other)
		{
			int compare = Tag.CompareTo(other.Tag);
			if (compare == 0)
			{
				compare = (Remove ? -1 : 1).CompareTo(other.Remove ? -1 : 1);
				if (compare == 0)
				{
					compare = (From ?? "").CompareTo(other.From ?? "");
				}
			}
			return compare;
		}

		public override string ToString()
		{
			return Tag;
		}
	}

	public enum EditorSource
	{
		CharacterEditor,
		MakeXml,
		Other
	}

	public class DuplicateCase
	{
		public List<Case> Duplicates = new List<Case>();
		public Case Replacement = null;
		public string ResolutionTag;

		public DuplicateCase(string tag)
		{
			ResolutionTag = tag;
		}

		public override string ToString()
		{
			return $"{Duplicates.Count} -> {ResolutionTag}";
		}
	}
}
